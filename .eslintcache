[{"/Users/samchen/Documents/opensource/encryptweb/src/index.js":"1","/Users/samchen/Documents/opensource/encryptweb/src/reportWebVitals.js":"2","/Users/samchen/Documents/opensource/encryptweb/src/App.js":"3","/Users/samchen/Documents/opensource/encryptweb/src/component/EncryptInfo.js":"4","/Users/samchen/Documents/opensource/encryptweb/src/component/ViewInfo.js":"5","/Users/samchen/Documents/opensource/encryptweb/src/locale/zh_CN.js":"6","/Users/samchen/Documents/opensource/encryptweb/src/locale/en_US.js":"7","/Users/samchen/Documents/opensource/encryptweb/src/component/ViewInfoPassword.js":"8","/Users/samchen/Documents/opensource/encryptweb/src/component/DeleteInfo.js":"9","/Users/samchen/Documents/opensource/encryptweb/src/component/SearchAppBar.js":"10"},{"size":500,"mtime":1612941585338,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1612941585338,"results":"13","hashOfConfig":"12"},{"size":1657,"mtime":1620221289082,"results":"14","hashOfConfig":"12"},{"size":13479,"mtime":1620220898751,"results":"15","hashOfConfig":"12"},{"size":5056,"mtime":1613573224106,"results":"16","hashOfConfig":"12"},{"size":1496,"mtime":1613573127059,"results":"17","hashOfConfig":"12"},{"size":1653,"mtime":1613573168089,"results":"18","hashOfConfig":"12"},{"size":8388,"mtime":1613573237207,"results":"19","hashOfConfig":"12"},{"size":1122,"mtime":1613570314721,"results":"20","hashOfConfig":"12"},{"size":2354,"mtime":1613284609540,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16pmj5h",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/samchen/Documents/opensource/encryptweb/src/index.js",[],"/Users/samchen/Documents/opensource/encryptweb/src/reportWebVitals.js",[],"/Users/samchen/Documents/opensource/encryptweb/src/App.js",[],"/Users/samchen/Documents/opensource/encryptweb/src/component/EncryptInfo.js",["47","48","49","50","51"],"import SearchAppBar from \"./SearchAppBar.js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport configData from \".././config.json\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\nimport \"./EncryptInfo.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport QuillResize from \"quill-resize-module\";\nimport zh_CN from \".././locale/zh_CN.js\";\nimport en_US from \".././locale/en_US.js\";\nimport locked_png from \".././icons/locked.png\";\nimport xss from \"xss\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport localStorage from \"local-storage\";\n\nQuill.register(\"modules/resize\", QuillResize);\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass EncryptInfo extends React.Component {\n  state = {\n    token: \"\",\n    currentValue: \"\",\n    open: false,\n    shareLink: \"\",\n    value: \"\",\n    copied: false,\n    showOption: false,\n    showOptionBtnText: \"\",\n    age: 0,\n    passwordContent: \"\",\n    repeatePasswordContent: \"\",\n    message: \"\",\n    openMessage: false,\n    email: \"\",\n    lang: \"\",\n    placeholder: \"\",\n    loading: false,\n    disabledSubmit: false,\n    beian: false,\n  };\n\n  handleChange = (event) => {\n    let options = {\n      entityStyleFn: (entity) => {\n        const entityType = entity.get(\"type\").toLowerCase();\n        if (entityType === \"image\") {\n          const data = entity.getData();\n          console.log(JSON.stringify(data));\n          return {\n            element: \"img\",\n            attributes: {\n              src: data.url,\n            },\n            style: {\n              // Put styles here...\n            },\n          };\n        }\n      },\n    };\n    const content = stateToHTML(event.getCurrentContent(), options);\n    this.setState({ currentValue: content });\n  };\n\n  selectShowMoreText() {\n    const locale = navigator.language.split(/[-_]/)[0];\n    if (locale === \"zh\") {\n      this.setState({ showOptionBtnText: zh_CN.showMoreOption });\n    } else {\n      this.setState({ showOptionBtnText: en_US.showMoreOption });\n    }\n  }\n  componentDidMount() {\n    const locale = navigator.language.split(/[-_]/)[0];\n    let language = \"en\";\n    if (locale === \"zh\") {\n      language = locale;\n      this.setState({ showOptionBtnText: zh_CN.showMoreOption });\n      this.setState({ beian: true });\n    } else {\n      this.setState({ showOptionBtnText: en_US.showMoreOption });\n    }\n    this.setState({\n      lang: language,\n    });\n    axios\n      .get(`${configData.API_SERVER_URL}/getToken`)\n      .then((res) => {\n        const token = res.data.data;\n        this.setState({ token });\n        localStorage.set(\"temp-token\", token);\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  }\n\n  emailIsValid(email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n\n  save = (data) => {\n    let htmlContent = this.state.currentValue;\n    const { intl } = this.props;\n    if (htmlContent === \"\" || htmlContent === null) {\n      alert(intl.formatMessage({ id: \"empty_editor_alert\" }));\n      return;\n    }\n    // xss filter\n    // htmlContent = xss(this.state.currentValue);\n\n    let token = this.state.token;\n    let body = {\n      content: htmlContent,\n      path: token,\n    };\n    if (this.state.showOption) {\n      let secondPasswordUserInput = this.state.passwordContent;\n      let sencodPasswordUserConfirm = this.state.repeatePasswordContent;\n      if (secondPasswordUserInput !== \"\") {\n        //password_too_long\n        if (secondPasswordUserInput.length > 12) {\n          this.setState({\n            message: intl.formatMessage({ id: \"password_too_long\" }),\n            openMessage: true,\n          });\n          return;\n        }\n        //password unmatch\n        if (secondPasswordUserInput !== sencodPasswordUserConfirm) {\n          this.setState({\n            message: intl.formatMessage({ id: \"un_match_password\" }),\n            openMessage: true,\n          });\n          return;\n        }\n\n        body = {\n          content: htmlContent,\n          path: token,\n          expire: this.state.age,\n          secondPassword: secondPasswordUserInput,\n          lang: this.state.lang,\n        };\n      } else {\n        body = {\n          content: htmlContent,\n          path: token,\n          expire: this.state.age,\n          lang: this.state.lang,\n        };\n      }\n    }\n    //start loading\n    this.setState({\n      loading: true,\n      disabledSubmit: true,\n    });\n    axios\n      .post(`${configData.API_SERVER_URL}/encryptInfo`, body)\n      .then((res) => {\n        this.setState({\n          loading: false,\n          disabledSubmit: false,\n        });\n        const path = res.data.data;\n        let shareLink = `${configData.SERVER_URL}/info/` + path;\n        this.setState({ open: true, shareLink: shareLink, copied: true });\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  };\n\n  openDialog = () => {\n    this.setState({ open: true });\n  };\n\n  showMoreOption = () => {\n    let showState = this.state.showOption;\n    this.setState({\n      showOption: !showState,\n    });\n    const locale = navigator.language.split(/[-_]/)[0];\n    const { intl } = this.props;\n    if (showState) {\n      this.setState({\n        showOptionBtnText: intl.formatMessage({ id: \"showMoreOption\" }),\n      });\n    } else {\n      this.setState({\n        showOptionBtnText: intl.formatMessage({ id: \"showLessOption\" }),\n      });\n    }\n  };\n  handleSelectChange = (event) => {\n    let currentAge = event.target.value;\n    this.setState({\n      age: currentAge,\n    });\n  };\n  getOptionContent(showOption) {\n    let optionContent = \"\";\n    const { intl } = this.props;\n    if (showOption) {\n      optionContent = (\n        <div className=\"more-option\">\n          <Grid container>\n            <Grid item xs={12} md={12} lg={12} xl={12}>\n              <p className=\"more-option-desc\">\n                <FormattedMessage id=\"readTimetip\" />\n              </p>\n              <Select\n                native\n                value={this.state.age}\n                onChange={this.handleSelectChange}\n                inputProps={{\n                  name: \"age\",\n                  id: \"age-native-simple\",\n                }}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                <option value={30}>\n                  {intl.formatMessage({ id: \"thirty_seconds\" })}\n                </option>\n                <option value={60}>\n                  {intl.formatMessage({ id: \"one_minute\" })}\n                </option>\n                <option value={180}>\n                  {intl.formatMessage({ id: \"three_minutes\" })}\n                </option>\n                <option value={300}>\n                  {intl.formatMessage({ id: \"five_minutes\" })}\n                </option>\n                <option value={900}>\n                  {intl.formatMessage({ id: \"fifteen_minutes\" })}\n                </option>\n                <option value={1800}>\n                  {intl.formatMessage({ id: \"thirty_minutes\" })}\n                </option>\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3} lg={3} xl={3}>\n              <p className=\"more-option-desc\">\n                <FormattedMessage id=\"enterPasswordtips\" />\n              </p>\n              <TextField\n                id=\"outlined-secondary\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                type=\"password\"\n                value={this.state.passwordContent}\n                onChange={this._handlePasswordChange}\n              />\n            </Grid>\n            <Grid item xs={12} md={3} lg={3} xl={3}>\n              <p className=\"more-option-desc\">\n                {\" \"}\n                <FormattedMessage id=\"repeatPasswordtips\" />\n              </p>\n              <TextField\n                id=\"outlined-secondary\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                type=\"password\"\n                value={this.state.repeatePasswordContent}\n                onChange={this._handlerepeatPasswordChange}\n              />\n            </Grid>\n          </Grid>\n        </div>\n      );\n    }\n    return optionContent;\n  }\n  _handlePasswordChange = (e) => {\n    this.setState({\n      passwordContent: e.target.value,\n    });\n  };\n\n  _handleEmailChange = (e) => {\n    this.setState({\n      email: e.target.value,\n    });\n  };\n  _handlerepeatPasswordChange = (e) => {\n    this.setState({\n      repeatePasswordContent: e.target.value,\n    });\n  };\n\n  handleEditorChange = (newValue) => {\n    this.setState({ currentValue: newValue });\n  };\n\n  closeShareDialog = () => {\n    this.selectShowMoreText();\n    //clean state\n    this.setState({\n      currentValue: \"\",\n      open: false,\n      shareLink: \"\",\n      value: \"\",\n      copied: false,\n      showOption: false,\n      age: 0,\n      passwordContent: \"\",\n      repeatePasswordContent: \"\",\n      message: \"\",\n      openMessage: false,\n      email: \"\",\n      lang: \"\",\n      placeholder: \"\",\n      disabledSubmit: false,\n    });\n    //new token\n    axios\n      .get(`${configData.API_SERVER_URL}/getToken`)\n      .then((res) => {\n        const token = res.data.data;\n        this.setState({ token });\n        localStorage.set(\"temp-token\", token);\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  };\n\n  render() {\n    const { intl } = this.props;\n    let optionContent = this.getOptionContent(this.state.showOption);\n \n    return (\n      <div>\n        <SearchAppBar />\n        {this.state.loading ? <LinearProgress /> : \"\"}\n        <div style={{ color: \"#333\", opacity: 0.6 }}>\n          <p>\n            <FormattedMessage id=\"introduce\" />\n          </p>\n        </div>\n        <div className=\"cus-text-editor\">\n          <ReactQuill\n            theme=\"snow\"\n            value={this.state.currentValue}\n            onChange={this.handleEditorChange}\n            bounds={\".app\"}\n            placeholder={this.state.placeholder}\n          />\n        </div>\n        {optionContent}\n        <div className=\"show-more-opition\">\n          <Grid container>\n            <Grid item xs={12} md={2} lg={2} xl={2}>\n              <div className=\"confirm-btn\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.save}\n                  disabled={this.state.disabledSubmit}\n                >\n                  <FormattedMessage id=\"createNote\" />\n                </Button>\n              </div>\n            </Grid>\n            <Grid item xs={12} md={2} lg={2} xl={2}>\n              <div className=\"confirm-btn\">\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={this.showMoreOption}\n                >\n                  {this.state.showOptionBtnText}\n                </Button>\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n\n        <Dialog open={this.state.open}>\n          <DialogTitle id=\"alert-dialog-title\">\n            {intl.formatMessage({ id: \"success_encryption\" })}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              <p className=\"encrpty_link_note\">{this.state.shareLink}</p>\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <CopyToClipboard\n              text={this.state.shareLink}\n              onCopy={() => this.setState({ copied: true })}\n            >\n              <Button color=\"primary\" className=\"copy_borad_btn\">\n                {intl.formatMessage({ id: \"copyboard\" })}\n              </Button>\n            </CopyToClipboard>\n            <Button color=\"primary\" autoFocus onClick={this.closeShareDialog}>\n              {intl.formatMessage({ id: \"close_dialog\" })}\n            </Button>\n          </DialogActions>\n          <p className=\"encrypt_note_tips\">\n            <img className=\"locked_png\" src={locked_png} />\n            {intl.formatMessage({ id: \"encrypt_text_ok\" })}\n          </p>\n        </Dialog>\n\n        <Snackbar\n          message={this.state.message}\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={this.state.openMessage}\n          onClose={() => this.setState({ openMessage: false })}\n          autoHideDuration={2000}\n        >\n          <Alert severity=\"error\">{this.state.message}</Alert>\n        </Snackbar>\n        <div class=\"footer\">\n          {this.state.beian ? (\n            <p>\n              <a href={\"#\"} target=\"_blank\">\n               \n              </a>\n            </p>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(EncryptInfo);\n","/Users/samchen/Documents/opensource/encryptweb/src/component/ViewInfo.js",["52","53"],"import React from \"react\";\nimport renderHTML from \"react-render-html\";\nimport axios from \"axios\";\nimport SearchAppBar from \"./SearchAppBar.js\";\nimport Container from \"@material-ui/core/Container\";\nimport \"./ViewInfo.css\";\nimport configData from \".././config.json\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nexport default class ViewInfo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      content: \"\",\n      path: \"\",\n      time: {},\n      seconds: \"\",\n      deleteToken: \"\",\n      loading: true,\n      disabledDelete: false,\n      lang: \"\",\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      match: { params },\n    } = this.props;\n    let topicId = params.topicId;\n    this.setState({ path: topicId });\n\n    const locale = navigator.language.split(/[-_]/)[0];\n    let language = \"en\";\n    if (locale === \"zh\") {\n      language = locale;\n    }\n\n    const body = {\n      path: topicId,\n      lang: language,\n    };\n\n    axios\n      .post(`${configData.API_SERVER_URL}/decryptInfo`, body)\n      .then((res) => {\n        const content = res.data.data;\n        this.setState({ content: content });\n        const code = res.data.state;\n        let expireTime = res.data.expireTime;\n        let deleteToken = res.data.deleteToken;\n        if (\"T00301\" === code) {\n          this.props.history.push(`/info/password/${topicId}`);\n          return;\n        }\n        if (expireTime === null || \"T00000\" !== code) {\n          this.props.history.push(\"/delete\");\n          return;\n        }\n        if (\"T00000\" === code && expireTime != null) {\n          this.setState({\n            seconds: expireTime,\n            deleteToken: deleteToken,\n            loading: false,\n          });\n          this.startTimer();\n        }\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  }\n\n  startTimer() {\n    if (this.timer === 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      seconds: seconds,\n    });\n    let path = this.state.path;\n    const body = {\n      path: path,\n      deleteToken: this.state.deleteToken,\n    };\n\n    // Check if we're at zero.\n    if (seconds === 0) {\n      clearInterval(this.timer);\n      setTimeout(() => {\n        // window.location.reload(false);\n        let that = this;\n        axios\n          .post(`${configData.API_SERVER_URL}/deleteInfo`, body)\n          .then((res) => {\n            const code = res.data.state;\n          })\n          .catch((error) => {\n            alert(\"service is not available\");\n          });\n        this.props.history.push(\"/delete\");\n      }, 2000);\n    }\n  }\n\n  secondsToTime(secs) {\n    return secs;\n  }\n\n  goToEncryptPage = () => {\n    this.props.history.push(`/`);\n  };\n\n  deleteNow = () => {\n    let path = this.state.path;\n    const body = {\n      path: path,\n      deleteToken: this.state.deleteToken,\n    };\n    this.setState({\n      disabledDelete: true,\n    });\n    axios\n      .post(`${configData.API_SERVER_URL}/deleteInfo`, body)\n      .then((res) => {\n        const code = res.data.state;\n        if (\"T00000\" === code) {\n          this.props.history.push(\"/delete\");\n          return;\n        }\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  };\n  render() {\n    return (\n      <div>\n        <SearchAppBar />\n        {this.state.loading ? (\n          <div>\n            <CircularProgress className=\"loading_icon\" />\n          </div>\n        ) : (\n          <Container fixed>\n            <div className=\"html-preview\">{renderHTML(this.state.content)}</div>\n            <Grid container>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.deleteNow}\n                disabled={this.state.disabledDelete}\n              >\n                <FormattedMessage id=\"delete_note_now\" />\n              </Button>\n              <div className=\"new_note\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.goToEncryptPage}\n                >\n                  <FormattedMessage id=\"createNewNote\" />\n                </Button>\n              </div>\n              <div className=\"tips_note\">\n                <FormattedMessage id=\"timer_tips\" />\n              </div>\n            </Grid>\n            <Fab\n              variant=\"extended\"\n              style={{ position: \"fixed\", right: 20, bottom: 20, opacity: 0.4 }}\n            >\n              {this.state.seconds}\n            </Fab>\n          </Container>\n        )}\n      </div>\n    );\n  }\n}\n","/Users/samchen/Documents/opensource/encryptweb/src/locale/zh_CN.js",[],"/Users/samchen/Documents/opensource/encryptweb/src/locale/en_US.js",[],"/Users/samchen/Documents/opensource/encryptweb/src/component/ViewInfoPassword.js",["54"],"import React from \"react\";\nimport renderHTML from \"react-render-html\";\nimport axios from \"axios\";\nimport SearchAppBar from \"./SearchAppBar.js\";\nimport Container from \"@material-ui/core/Container\";\nimport \"./ViewInfoPassword.css\";\nimport configData from \".././config.json\";\nimport Fab from \"@material-ui/core/Fab\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { injectIntl } from \"react-intl\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { FormattedMessage } from \"react-intl\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass ViewInfoPassword extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      content: \"\",\n      path: \"\",\n      time: {},\n      seconds: \"\",\n      textFieldValue: \"\",\n      showContent: false,\n      message: \"\",\n      open: false,\n      deleteToken: \"\",\n      loading: false,\n      disabledDelete: false,\n      disabledConfirmPwd: false,\n      lang: \"\",\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    const locale = navigator.language.split(/[-_]/)[0];\n    let language = \"en\";\n    if (locale === \"zh\") {\n      language = locale;\n    }\n    this.setState({\n      lang: language,\n    });\n  }\n\n  startTimer() {\n    if (this.timer === 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      seconds: seconds,\n    });\n    let path = this.state.path;\n    const body = {\n      path: path,\n      deleteToken: this.state.deleteToken,\n    };\n    // Check if we're at zero.\n    if (seconds === 0) {\n      clearInterval(this.timer);\n      setTimeout(() => {\n        // window.location.reload(false);\n        axios\n          .post(`${configData.API_SERVER_URL}/deleteInfo`, body)\n          .then((res) => {\n            const code = res.data.state;\n          })\n          .catch((error) => {\n            alert(\"service is not available\");\n          });\n        this.props.history.push(\"/delete\");\n      }, 2000);\n    }\n  }\n\n  secondsToTime(secs) {\n    return secs;\n  }\n\n  confirmPassword = () => {\n    let passwordInput = this.state.textFieldValue;\n    const { intl } = this.props;\n    if (passwordInput === null || passwordInput === \"\") {\n      this.setState({\n        textFieldValue: \"\",\n        message: intl.formatMessage({ id: \"password_empty\" }),\n        open: true,\n      });\n      return;\n    }\n    if (passwordInput.length > 12) {\n      this.setState({\n        textFieldValue: \"\",\n        message: intl.formatMessage({ id: \"password_too_long\" }),\n        open: true,\n      });\n      return;\n    }\n    const {\n      match: { params },\n    } = this.props;\n    let topicId = params.topicId;\n    this.setState({ path: topicId });\n    const body = {\n      path: topicId,\n      secondPassword: passwordInput,\n      lang: this.state.lang,\n    };\n    this.setState({ loading: true, disabledConfirmPwd: true });\n    axios\n      .post(`${configData.API_SERVER_URL}/decryptInfoWithPassword`, body)\n      .then((res) => {\n        const code = res.data.state;\n        let expireTime = res.data.expireTime;\n        let deleteToken = res.data.deleteToken;\n        this.setState({\n          loading: false,\n          disabledConfirmPwd: false,\n        });\n        if (code === \"T00407\") {\n          this.setState({\n            textFieldValue: \"\",\n            message: intl.formatMessage({ id: \"password_error\" }),\n            open: true,\n          });\n          return;\n        }\n        if (\"T00406\" === code) {\n          alert(\"error page\");\n          return;\n        }\n        if (\"T00404\" === code) {\n          this.props.history.push(\"/delete\");\n          return;\n        }\n        if (\"T00000\" === code && expireTime !== null && deleteToken !== null) {\n          const content = res.data.data;\n          this.setState({ showContent: true });\n          this.setState({ content: content });\n          this.setState({ seconds: expireTime, deleteToken: deleteToken });\n          this.startTimer();\n        }\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n        this.setState({ loading: false, disabledConfirmPwd: true });\n      });\n    //show decrypt content\n  };\n\n  _handleTextFieldChange = (e) => {\n    this.setState({\n      textFieldValue: e.target.value,\n    });\n  };\n\n  goToEncryptPage = () => {\n    this.props.history.push(`/`);\n  };\n\n  deleteNow = () => {\n    let path = this.state.path;\n    const body = {\n      path: path,\n      deleteToken: this.state.deleteToken,\n    };\n    this.setState({\n      disabledDelete: true,\n    });\n    axios\n      .post(`${configData.API_SERVER_URL}/deleteInfo`, body)\n      .then((res) => {\n        const code = res.data.state;\n        if (\"T00000\" === code) {\n          this.props.history.push(\"/delete\");\n          return;\n        }\n      })\n      .catch((error) => {\n        alert(\"service is not available\");\n      });\n  };\n\n  getContent(showContent) {\n    let content;\n    if (showContent) {\n      content = this.state.loading ? (\n        <div>\n          <CircularProgress className=\"loading_icon\" />\n        </div>\n      ) : (\n        <Container fixed>\n          <div className=\"html-preview\">{renderHTML(this.state.content)}</div>\n          <Grid container>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={this.state.disabledDelete}\n              onClick={this.deleteNow}\n            >\n              <FormattedMessage id=\"delete_note_now\" />\n            </Button>\n            <div className=\"new_note\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.goToEncryptPage}\n              >\n                <FormattedMessage id=\"createNewNote\" />\n              </Button>\n            </div>\n            <div className=\"tips_note\">\n              <FormattedMessage id=\"timer_tips\" />\n            </div>\n          </Grid>\n        </Container>\n      );\n    } else {\n      content = this.state.loading ? (\n        <div>\n          <CircularProgress className=\"loading_icon\" />\n        </div>\n      ) : (\n        <Container fixed>\n          <form>\n            <Grid item xs={12} lg={3}>\n              <div className=\"form-item\">\n                <label className=\"form-item-label\">\n                  <FormattedMessage id=\"enter_extra_password_tips\" />\n                </label>\n              </div>\n              <div className=\"form-item\">\n                <TextField\n                  id=\"outlined-secondary\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  type=\"password\"\n                  value={this.state.textFieldValue}\n                  onChange={this._handleTextFieldChange}\n                />\n              </div>\n              <div className=\"form-item\">\n                <Button\n                  onClick={this.confirmPassword}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={this.state.disabledConfirmPwd}\n                >\n                  <FormattedMessage id=\"confirm_btn_text\" />\n                </Button>\n              </div>\n            </Grid>\n          </form>\n          <Snackbar\n            message={this.state.message}\n            anchorOrigin={{ vertical: \"center\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: false })}\n            autoHideDuration={1000}\n          >\n            <Alert severity=\"error\">{this.state.message}</Alert>\n          </Snackbar>\n        </Container>\n      );\n    }\n    return content;\n  }\n\n  render() {\n    let content = this.getContent(this.state.showContent);\n    return (\n      <div>\n        <SearchAppBar />\n        {content}\n        <Fab\n          variant=\"extended\"\n          style={{ position: \"fixed\", right: 20, bottom: 20, opacity: 0.4 }}\n        >\n          {this.state.seconds}\n        </Fab>\n      </div>\n    );\n  }\n}\nexport default injectIntl(ViewInfoPassword);\n","/Users/samchen/Documents/opensource/encryptweb/src/component/DeleteInfo.js",["55"],"import React from \"react\";\nimport SearchAppBar from \"./SearchAppBar.js\";\nimport Container from \"@material-ui/core/Container\";\nimport \"./DeleteInfo.css\";\nimport logo404 from \"./08_404.gif\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\n\nclass DeleteInfo extends React.Component {\n  componentDidMount() {}\n\n  goToEncryptPage = () => {\n    this.props.history.push(`/`);\n  };\n  render() {\n    const { intl } = this.props;\n\n    return (\n      <div>\n        <SearchAppBar />\n\n        <Container>\n          <Box justifyContent=\"center\" style={{ textAlign: \"center\" }}>\n            <h3>{intl.formatMessage({ id: \"deleteInfo\" })}</h3>\n            <img src={logo404} />\n            <div className=\"new_note\">\n              <Button variant=\"contained\" color=\"primary\" onClick={this.goToEncryptPage}>\n                <FormattedMessage id=\"createNewNote\" />\n              </Button>\n            </div>\n          </Box>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(DeleteInfo);\n","/Users/samchen/Documents/opensource/encryptweb/src/component/SearchAppBar.js",["56"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport configData from \".././config.json\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}));\n\nexport default function SearchAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            <Link to='/' style={{ textDecoration: 'none', color: 'white' }} ><FormattedMessage id=\"brand\" /></Link>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}",{"ruleId":"57","severity":1,"message":"58","line":24,"column":8,"nodeType":"59","messageId":"60","endLine":24,"endColumn":11},{"ruleId":"57","severity":1,"message":"61","line":202,"column":11,"nodeType":"59","messageId":"60","endLine":202,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":422,"column":13,"nodeType":"64","endLine":422,"endColumn":60},{"ruleId":"65","severity":1,"message":"66","line":439,"column":15,"nodeType":"64","messageId":"67","endLine":439,"endColumn":45,"fix":"68"},{"ruleId":"69","severity":1,"message":"70","line":439,"column":15,"nodeType":"64","endLine":439,"endColumn":45},{"ruleId":"57","severity":1,"message":"71","line":103,"column":13,"nodeType":"59","messageId":"60","endLine":103,"endColumn":17},{"ruleId":"57","severity":1,"message":"72","line":107,"column":19,"nodeType":"59","messageId":"60","endLine":107,"endColumn":23},{"ruleId":"57","severity":1,"message":"72","line":81,"column":19,"nodeType":"59","messageId":"60","endLine":81,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":27,"column":13,"nodeType":"64","endLine":27,"endColumn":34},{"ruleId":"57","severity":1,"message":"73","line":8,"column":8,"nodeType":"59","messageId":"60","endLine":8,"endColumn":18},"no-unused-vars","'xss' is defined but never used.","Identifier","unusedVar","'locale' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"74","text":"75"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'that' is assigned a value but never used.","'code' is assigned a value but never used.","'configData' is defined but never used.",[13299,13299]," rel=\"noreferrer\""]